import os
import requests
import datetime
import matplotlib.pyplot as plt
from io import BytesIO
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
load_dotenv()
NASA_API_KEY = os.getenv("NASA_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# üìè –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
def size_description(diameter):
    if diameter < 5:
        return "–∫–∞–∫ –ª–µ–≥–∫–æ–≤–∞—è –º–∞—à–∏–Ω–∞ üöó"
    elif diameter < 20:
        return "–∫–∞–∫ –∞–≤—Ç–æ–±—É—Å üöå"
    elif diameter < 50:
        return "–∫–∞–∫ –º–Ω–æ–≥–æ—ç—Ç–∞–∂–Ω—ã–π –¥–æ–º üè¢"
    elif diameter < 100:
        return "–∫–∞–∫ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ ‚öΩ"
    elif diameter < 300:
        return "–∫–∞–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π üèüÔ∏è"
    else:
        return "–≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π –∞—Å—Ç–µ—Ä–æ–∏–¥ üåå"

# üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –∑–∞ –¥–∞—Ç—É/–ø–µ—Ä–∏–æ–¥
def get_asteroids(start_date, end_date=None, dangerous_only=False, min_size=None, max_size=None):
    if end_date is None:
        end_date = start_date
    url = f"https://api.nasa.gov/neo/rest/v1/feed?start_date={start_date}&end_date={end_date}&api_key={NASA_API_KEY}"
    data = requests.get(url).json()
    asteroids = []
    for day in data["near_earth_objects"]:
        for a in data["near_earth_objects"][day]:
            diameter_min = a["estimated_diameter"]["meters"]["estimated_diameter_min"]
            diameter_max = a["estimated_diameter"]["meters"]["estimated_diameter_max"]
            avg_diameter = (diameter_min + diameter_max) / 2

            # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            if dangerous_only and not a["is_potentially_hazardous_asteroid"]:
                continue
            if min_size and avg_diameter < min_size:
                continue
            if max_size and avg_diameter > max_size:
                continue

            asteroids.append(a)
    return asteroids

# ü™ê –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def asteroid_info(a):
    name = a["name"]
    diameter_min = a["estimated_diameter"]["meters"]["estimated_diameter_min"]
    diameter_max = a["estimated_diameter"]["meters"]["estimated_diameter_max"]
    avg_diameter = (diameter_min + diameter_max) / 2

    speed = a["close_approach_data"][0]["relative_velocity"]["kilometers_per_hour"]
    distance = a["close_approach_data"][0]["miss_distance"]["kilometers"]

    return (
        f"‚òÑÔ∏è {name}\n"
        f"üìè –†–∞–∑–º–µ—Ä: {avg_diameter:.1f} –º ({size_description(avg_diameter)})\n"
        f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {float(speed):,.0f} –∫–º/—á\n"
        f"üåç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {float(distance):,.0f} –∫–º\n"
        f"‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–π: {'–î–∞' if a['is_potentially_hazardous_asteroid'] else '–ù–µ—Ç'}\n"
    )

# === –ö–û–ú–ê–ù–î–´ ===

def today(update: Update, context: CallbackContext):
    date = datetime.date.today().strftime("%Y-%m-%d")
    asteroids = get_asteroids(date)
    text = "\n".join([asteroid_info(a) for a in asteroids[:5]]) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    update.message.reply_text(f"–ê—Å—Ç–µ—Ä–æ–∏–¥—ã –∑–∞ {date}:\n\n{text}")

def tomorrow(update: Update, context: CallbackContext):
    date = (datetime.date.today() + datetime.timedelta(days=1)).strftime("%Y-%m-%d")
    asteroids = get_asteroids(date)
    text = "\n".join([asteroid_info(a) for a in asteroids[:5]]) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    update.message.reply_text(f"–ê—Å—Ç–µ—Ä–æ–∏–¥—ã –∑–∞ {date}:\n\n{text}")

def yesterday(update: Update, context: CallbackContext):
    date = (datetime.date.today() - datetime.timedelta(days=1)).strftime("%Y-%m-%d")
    asteroids = get_asteroids(date)
    text = "\n".join([asteroid_info(a) for a in asteroids[:5]]) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    update.message.reply_text(f"–ê—Å—Ç–µ—Ä–æ–∏–¥—ã –∑–∞ {date}:\n\n{text}")

def danger(update: Update, context: CallbackContext):
    date = datetime.date.today().strftime("%Y-%m-%d")
    asteroids = get_asteroids(date, dangerous_only=True)
    text = "\n".join([asteroid_info(a) for a in asteroids]) or "üöÄ –û–ø–∞—Å–Ω—ã—Ö –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –Ω–µ—Ç"
    update.message.reply_text(f"üö® –û–ø–∞—Å–Ω—ã–µ –∞—Å—Ç–µ—Ä–æ–∏–¥—ã {date}:\n\n{text}")

def big(update: Update, context: CallbackContext):
    date = datetime.date.today().strftime("%Y-%m-%d")
    asteroids = get_asteroids(date, min_size=100)
    text = "\n".join([asteroid_info(a) for a in asteroids]) or "–ö—Ä—É–ø–Ω—ã—Ö –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –Ω–µ—Ç"
    update.message.reply_text(f"ü™ê –ö—Ä—É–ø–Ω—ã–µ –∞—Å—Ç–µ—Ä–æ–∏–¥—ã {date}:\n\n{text}")

def small(update: Update, context: CallbackContext):
    date = datetime.date.today().strftime("%Y-%m-%d")
    asteroids = get_asteroids(date, max_size=20)
    text = "\n".join([asteroid_info(a) for a in asteroids]) or "–ú–∞–ª–µ–Ω—å–∫–∏—Ö –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –Ω–µ—Ç"
    update.message.reply_text(f"üåë –ú–∞–ª–µ–Ω—å–∫–∏–µ –∞—Å—Ç–µ—Ä–æ–∏–¥—ã {date}:\n\n{text}")

def week(update: Update, context: CallbackContext):
    start = datetime.date.today()
    end = start + datetime.timedelta(days=7)
    asteroids = get_asteroids(start.strftime("%Y-%m-%d"), end.strftime("%Y-%m-%d"))
    text = "\n".join([asteroid_info(a) for a in asteroids[:10]]) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    update.message.reply_text(f"üìÖ –ê—Å—Ç–µ—Ä–æ–∏–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n{text}")

def apod(update: Update, context: CallbackContext):
    url = f"https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}"
    data = requests.get(url).json()
    update.message.reply_photo(data["url"], caption=f"üåå {data['title']}\n\n{data['explanation']}")

def chart(update: Update, context: CallbackContext):
    date = datetime.date.today().strftime("%Y-%m-%d")
    asteroids = get_asteroids(date)

    if not asteroids:
        update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        return

    names = [a["name"] for a in asteroids]
    distances = [float(a["close_approach_data"][0]["miss_distance"]["kilometers"]) for a in asteroids]

    plt.figure(figsize=(8, 5))
    plt.barh(names, distances)
    plt.xlabel("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ó–µ–º–ª–∏ (–∫–º)")
    plt.title(f"–ê—Å—Ç–µ—Ä–æ–∏–¥—ã {date}")
    plt.tight_layout()

    bio = BytesIO()
    plt.savefig(bio, format="png")
    bio.seek(0)
    plt.close()
    update.message.reply_photo(bio)

# === –°–¢–ê–†–¢ ===
def start(update: Update, context: CallbackContext):
    keyboard = [
        ["üìÖ –°–µ–≥–æ–¥–Ω—è", "‚è≠ –ó–∞–≤—Ç—Ä–∞"],
        ["‚èÆ –í—á–µ—Ä–∞", "‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ"],
        ["ü™ê –ö—Ä—É–ø–Ω—ã–µ", "üåë –ú–∞–ª–µ–Ω—å–∫–∏–µ"],
        ["üìä –ì—Ä–∞—Ñ–∏–∫", "üåå –§–æ—Ç–æ –¥–Ω—è"],
        ["üìÜ –ù–µ–¥–µ–ª—è"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç NASA üöÄ\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

# === –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–æ–∫ ===
def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    if text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        today(update, context)
    elif text == "‚è≠ –ó–∞–≤—Ç—Ä–∞":
        tomorrow(update, context)
    elif text == "‚èÆ –í—á–µ—Ä–∞":
        yesterday(update, context)
    elif text == "‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ":
        danger(update, context)
    elif text == "ü™ê –ö—Ä—É–ø–Ω—ã–µ":
        big(update, context)
    elif text == "üåë –ú–∞–ª–µ–Ω—å–∫–∏–µ":
        small(update, context)
    elif text == "üìÜ –ù–µ–¥–µ–ª—è":
        week(update, context)
    elif text == "üåå –§–æ—Ç–æ –¥–Ω—è":
        apod(update, context)
    elif text == "üìä –ì—Ä–∞—Ñ–∏–∫":
        chart(update, context)
    else:
        update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª ü§î")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("today", today))
    dp.add_handler(CommandHandler("tomorrow", tomorrow))
    dp.add_handler(CommandHandler("yesterday", yesterday))
    dp.add_handler(CommandHandler("danger", danger))
    dp.add_handler(CommandHandler("big", big))
    dp.add_handler(CommandHandler("small", small))
    dp.add_handler(CommandHandler("week", week))
    dp.add_handler(CommandHandler("apod", apod))
    dp.add_handler(CommandHandler("chart", chart))

    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
